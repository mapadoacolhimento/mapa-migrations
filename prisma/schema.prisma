generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["match", "public"]
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]

  @@index([name], map: "auth_group_name_a6ea08ec_like")
  @@schema("public")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([group_id], map: "auth_group_permissions_group_id_b120cbf9")
  @@index([permission_id], map: "auth_group_permissions_permission_id_84c5c92e")
  @@schema("public")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  auth_group_permissions     auth_group_permissions[]
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
  @@index([content_type_id], map: "auth_permission_content_type_id_2f476e4b")
  @@schema("public")
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.Timestamptz(6)
  is_superuser               Boolean
  username                   String                       @unique @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.Timestamptz(6)
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]
  volunteers_formdata        VolunteerFormData?

  @@index([username], map: "auth_user_username_6821ab7c_like")
  @@schema("public")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

  @@unique([user_id, group_id], map: "auth_user_groups_user_id_group_id_94350c0c_uniq")
  @@index([group_id], map: "auth_user_groups_group_id_97559544")
  @@index([user_id], map: "auth_user_groups_user_id_6a12ed8b")
  @@schema("public")
}

/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
  auth_user       auth_user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id")

  @@unique([user_id, permission_id], map: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
  @@index([permission_id], map: "auth_user_user_permissions_permission_id_1fbb5f2c")
  @@index([user_id], map: "auth_user_user_permissions_user_id_a95ead1b")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.Timestamptz(6)
  object_id           String?
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.SmallInt
  change_message      String
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  auth_user           auth_user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6")
  @@schema("public")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
  @@schema("public")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.Timestamptz(6)

  @@schema("public")
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String
  expire_date  DateTime @db.Timestamptz(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
  @@index([session_key], map: "django_session_session_key_c0390e0f_like")
  @@schema("public")
}

model VolunteerIntegrationLogs {
  id          BigInt   @id @default(autoincrement())
  type        String   @db.VarChar(30)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  status      String   @db.VarChar(30)
  error       String
  data        Json
  integration String   @db.VarChar(15)
  externalId  Int?     @map("external_id")
  formType    String   @map("form_type") @db.VarChar(15)
  internalId  Int?     @map("internal_id")

  @@map("volunteer_integration_logs")
  @@schema("public")
}

model VolunteerAvailability {
  volunteerId         Int         @id @map("volunteer_id")
  currentMatches      Int         @map("current_matches")
  maxMatches          Int         @map("max_matches")
  isAvailable         Boolean     @map("is_available")
  supportType         SupportType @map("support_type")
  supportExpertise    String      @map("support_expertise") @db.VarChar(200)
  offersOnlineSupport Boolean     @map("offers_online_support")
  lat                 Decimal?    @db.Decimal(10, 4)
  lng                 Decimal?    @db.Decimal(10, 4)
  city                String      @db.VarChar(100)
  state               String      @db.VarChar(9)
  offersLibrasSupport Boolean     @map("offers_libras_support")
  createdAt           DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime    @updatedAt @map("updated_at") @db.Timestamp(6)
  volunteer           Volunteers  @relation(fields: [volunteerId], references: [id])

  @@map("volunteer_availability")
  @@schema("public")
}

model VolunteerStatusHistory {
  id          BigInt     @id @default(autoincrement())
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  volunteerId Int        @map("volunteer_id")
  status      String     @db.VarChar(30)
  volunteer   Volunteers @relation(fields: [volunteerId], references: [id])

  @@map("volunteer_status_history")
  @@schema("public")
}

model Volunteers {
  id                       Int                      @id @default(autoincrement())
  createdAt                DateTime                 @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                DateTime                 @updatedAt @map("updated_at") @db.Timestamp(6)
  condition                String                   @db.VarChar(30)
  firstName                String                   @map("first_name") @db.VarChar(200)
  lastName                 String                   @map("last_name") @db.VarChar(200)
  email                    String                   @db.VarChar(254)
  phone                    String                   @db.VarChar(100)
  zipcode                  String                   @db.VarChar(9)
  state                    String                   @db.VarChar(9)
  city                     String                   @db.VarChar(100)
  neighborhood             String                   @db.VarChar(100)
  latitude                 Decimal?                 @db.Decimal(10, 4)
  longitude                Decimal?                 @db.Decimal(10, 4)
  registerNumber           String                   @map("register_number") @db.VarChar(400)
  birthdate                DateTime                 @map("birthdate") @db.Timestamp(6)
  color                    String                   @db.VarChar(100)
  gender                   String                   @db.VarChar(100)
  modality                 String                   @db.VarChar(100)
  fieldsOfWork             String                   @map("fields_of_work") @db.VarChar(200)
  yearsOfExperience        String                   @map("years_of_experience") @db.VarChar(100)
  approach                 String?                  @db.VarChar(100)
  formDataId               BigInt?                  @map("form_data_id")
  occupation               String                   @db.VarChar(12)
  moodleId                 Int?                     @map("moodle_id")
  formEntriesId            BigInt?                  @map("form_entries_id")
  zendeskUserId            BigInt?                  @map("zendesk_user_id")
  availability             Int
  offersLibrasSupport      Boolean                  @map("offers_libras_support")
  street                   String?                  @db.VarChar(200)
  volunteer_availability   VolunteerAvailability?
  volunteer_status_history VolunteerStatusHistory[]
  volunteers_formdata      VolunteerFormData?       @relation(fields: [formDataId], references: [id])

  @@map("volunteers")
  @@schema("public")
}

model VolunteerFormData {
  id          BigInt       @id @default(autoincrement())
  type_form   String       @db.VarChar(10)
  step        Int
  values      Json
  user_id     Int          @unique
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  total_steps Int
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.Timestamp(6)
  volunteers  Volunteers[]
  auth_user   auth_user    @relation(fields: [user_id], references: [id])

  @@map("volunteer_form_data")
  @@schema("public")
}

model Cities {
  cityId    Int      @id @default(autoincrement()) @map("city_id")
  cityValue String   @map("city_value") @db.VarChar(100)
  cityLabel String   @map("city_label") @db.VarChar(100)
  state     String   @db.VarChar(2)
  ibgeCode  Int      @map("ibge_code")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("cities")
  @@schema("public")
}

enum SupportType {
  psychological
  legal

  @@map("support_type")
  @@schema("match")
}
